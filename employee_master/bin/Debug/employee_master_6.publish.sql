/*
Deployment script for employee_master

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "employee_master"
:setvar DefaultFilePrefix "employee_master"
:setvar DefaultDataPath "C:\Users\User\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\User\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[spEmployees_Insert]...';


GO
ALTER PROCEDURE [dbo].[spEmployees_Insert]
	@FirstName nvarchar(50),
	@LastName nvarchar(50),
	@PhoneNumber nvarchar(20),
	@HireDate date,
	@Salary money,
	@JobTitle nvarchar(100),
	@Status bit
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @JobId int;

	IF NOT EXISTS (SELECT 1 FROM dbo.Jobs WHERE Title = @JobTitle)
	BEGIN
		INSERT INTO dbo.Jobs (Title)
		VALUES (@JobTitle)

		SELECT @JobId = SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		SELECT @JobId = Id FROM dbo.Jobs WHERE Title = @JobTitle;
	END

	INSERT INTO dbo.Employees (FirstName, LastName, PhoneNumber, HireDate, Salary, Status, JobId)
	VALUES (@FirstName, @LastName, @PhoneNumber, @HireDate, @Salary, @Status, @JobId);
END
GO
PRINT N'Altering Procedure [dbo].[spEmployees_Update]...';


GO
ALTER PROCEDURE [dbo].[spEmployees_Update]
	@Id int,
	@FirstName nvarchar(50),
	@LastName nvarchar(50),
	@PhoneNumber nvarchar(20),
	@HireDate date,
	@Salary money,
	@JobTitle nvarchar(100),
	@Status bit
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @JobId int;

	IF NOT EXISTS (SELECT 1 FROM dbo.Jobs WHERE Title = @JobTitle)
	BEGIN
		INSERT INTO dbo.Jobs (Title)
		VALUES (@JobTitle)

		SELECT @JobId = SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		SELECT @JobId = Id FROM dbo.Jobs WHERE Title = @JobTitle;
	END


	UPDATE dbo.Employees
	SET FirstName = @FirstName,
		LastName = @LastName,
		PhoneNumber = @PhoneNumber,
		HireDate = @HireDate,
		Salary = @Salary,
		JobId = @JobId,
		Status = @Status
	WHERE Id = @Id

END
GO
PRINT N'Creating Procedure [dbo].[spEmployees_GetEmployeeById]...';


GO
CREATE PROCEDURE [dbo].[spEmployees_GetEmployeeById]
	@Id int
AS
BEGIN
	SELECT [e].[Id], [e].[FirstName], [e].[LastName], [e].[PhoneNumber], [e].[HireDate], [e].[Salary], [e].[Status], [j].[Title] 
	FROM dbo.Employees e
	INNER JOIN dbo.Jobs j
		ON j.Id = e.JobId
	WHERE e.Id = @Id;
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS (SELECT 1 FROM dbo.Jobs)
BEGIN
    INSERT INTO dbo.Jobs (Title)
    VALUES ('Programmer'),
    ('Accountant'),
    ('Sale'),
    ('CEO'),
    ('Project Manager')
END
GO

GO
PRINT N'Update complete.';


GO
